<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[my first hexo]]></title>
      <url>%2F2017%2F03%2F20%2Fmy-first-hexo%2F</url>
      <content type="text"><![CDATA[hello glinlf and hexo!]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F03%2F19%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Fri Mar 17 2017 00:00:00 GMT+0800 (中国标准时间)]]></title>
      <url>%2F2017%2F03%2F17%2F2017-03-17%2F</url>
      <content type="text"><![CDATA[python全局变量使用: 1 可以直接定义一个globalvar.py文件；里面存放其他文件要使用的变量。在其他文件中导入: 12345678910111213141516171819202122232425262728from src.globalvar import *# __author_=&quot;gLinlf&quot;# coding=utf-8import queue# 定义全局变量# 已经爬取得到所有urlhad_url = set()# 已经爬取解析用户的urlhad_used_url = set()# 用户关注的其他用户的url 使用队列（使用后删除）follow_url = queue.Queue(maxsize=0)# 爬虫入口# follow_url.put(&apos;https://www.zhihu.com/people/liaoxuefeng&apos;)follow_url.put(&apos;https://www.zhihu.com/people/competitionlaw&apos;)# 请求头header = &#123; &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36&apos;&#125;# 数据库名db_name = &apos;test&apos;# 抽样爬取不大于10个分页的用户(200人)（加快用户信息爬取速度！概率性减少 花费早爬取页面中存在较多已经爬去的用户url 的资源和时间。）max_page = int(10)# 异步IO请求解析的最大页码数max_parse_page = int(5)]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Thu Mar 16 2017 00:00:00 GMT+0800 (中国标准时间)]]></title>
      <url>%2F2017%2F03%2F16%2F2017-03-16%2F</url>
      <content type="text"><![CDATA[mongoengine操作mongodb的使用笔记参见mongoengine文档 1 安装mongoengine pip install -U mongoengine 2 在python3.5中创建连接 mongoengine.connect（db = None，alias =’default’，** kwargs ） 2.1如果使用的时本地连接，则由’db’参数指定的数据库，直接连接数据库例如： mongoengine.connect(‘testdb’) 2.2如果数据库不在localhost的默认端口上运行，也可以在此处提供连接设置(如果需要验证，请提供用户名和密码参数。)： 1mongoengine.register_connection（alias，name = None，host = None，port = None，read_preference = Primary（），username = None，password = None，authentication_source = None，authentication_mechanism = None，** kwargs ） 参数： alias - 将用于在MongoEngine中引用此连接的名称 name - 要使用的特定数据库的名称 host - 要连接的mongod实例的主机名 port - mongod实例正在运行的端口 read_preference - 集合的读取首选项**添加pymongo 2.1 username - 要进行身份验证的用户名 密码 - 要验证的密码 authentication_source - 要进行身份验证的数据库 authentication_mechanism - 数据库认证机制。默认情况下，对MongoDB 3.0及更高版本使用SCRAM-SHA-1，对较旧的服务器使用MONGODB-CR（MongoDB Challenge Response协议）。 is_mock - 明确使用mongomock进行连接（也可以使用mongomock：//作为db主机前缀） kwargs - 要传递到pymongo驱动程序的特定参数，例如maxpoolsize，tz_aware等。有关完整列表，请参阅pymongo的MongoClient文档。 mongoengine在python中的基本使用：新增（save）1创建py文件testmongo.py 类为TestCategories ，TestCategories类似存入mongodb数据库中的表：12345678 import mongoengineclass TestCategories(mongoengine.Document): # 用户信息地址 user_url = mongoengine.StringField() # 用户名 user_name = mongoengine.StringField() # 用户居住所在地 user_locations = mongoengine.ListField() 2 在另一个py文件创建一个测试文件 test.py: 12345678910111213141516171819202122 &gt;from src.testmogo import TestCategories from mongoengine import * connect(&apos;test&apos;) cate = TestCategories() cate.user_url = &apos;hello&apos; cate.user_name= &apos;python&apos; cate.user_locations = [&apos;llf&apos;] cate.save()``` 3执行 test.py文件查看 数据库结果： ![](~/16-29-01.jpg)## 查询对于objects的到只是一个queryset类（QuerySet），这类里面有丰富的信息，存放所有查询到的 document对象（TestCategories）的list集合。可以使用for in list 语法将查询到的类对象里的数据灵活拼接成一个新的dict或list。参考：[Python中QuerySet和Objects类](http://www.cnblogs.com/snapeliu/p/4980994.html) obj = TestCategories.objects(user_url=’123’) print(type(obj)) [, ]print(obj)for i in obj: print(i.user_url)123## 更新安装 django的web框架后 有update（）等方法。 obj = TestCategories.objects(user_url=&apos;123&apos;)获得的就是对应的document。 obj.user_url = &apos;321&apos; obj.update() 1常规更新： obj = TestCategories.objects(user_url=’123’) print(type(obj)) [, ]print(obj)for i in obj: print(i.user_url) # 直接操作 i（TestCategories）对象 ，修改对应的字段值，更新！ i.user_name = &apos;xx&apos; i.save() ``` 删除]]></content>
    </entry>

    
  
  
</search>
